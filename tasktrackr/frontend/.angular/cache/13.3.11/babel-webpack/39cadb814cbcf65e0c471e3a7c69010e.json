{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TaskService = /*#__PURE__*/(() => {\n  class TaskService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}/api/tasks`;\n    } // Get all tasks with optional filtering\n\n\n    getTasks(filters) {\n      let params = new HttpParams();\n\n      if (filters) {\n        if (filters.completed !== undefined) {\n          params = params.append('completed', filters.completed.toString());\n        }\n\n        if (filters.priority) {\n          params = params.append('priority', filters.priority);\n        }\n\n        if (filters.category) {\n          params = params.append('category', filters.category);\n        }\n      }\n\n      return this.http.get(this.apiUrl, {\n        params\n      });\n    } // Get a single task by ID\n\n\n    getTask(id) {\n      return this.http.get(`${this.apiUrl}/${id}`);\n    } // Create a new task\n\n\n    createTask(task) {\n      return this.http.post(this.apiUrl, task);\n    } // Update an existing task\n\n\n    updateTask(id, task) {\n      return this.http.put(`${this.apiUrl}/${id}`, task);\n    } // Delete a task\n\n\n    deleteTask(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`);\n    } // Mark a task as complete/incomplete\n\n\n    toggleTaskCompletion(id) {\n      return this.http.put(`${this.apiUrl}/${id}/complete`, {});\n    } // Search for tasks by keyword\n\n\n    searchTasks(keyword) {\n      const params = new HttpParams().append('keyword', keyword);\n      return this.http.get(`${this.apiUrl}/search`, {\n        params\n      });\n    } // Get tasks with upcoming deadlines\n\n\n    getUpcomingDeadlines() {\n      return this.http.get(`${this.apiUrl}/deadlines`);\n    }\n\n  }\n\n  TaskService.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n  return TaskService;\n})();","map":null,"metadata":{},"sourceType":"module"}