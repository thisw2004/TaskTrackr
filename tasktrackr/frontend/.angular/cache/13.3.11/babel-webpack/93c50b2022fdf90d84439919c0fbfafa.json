{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { tap, map, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.apiUrl = `${environment.apiUrl}/api/auth`;\n      this.tokenKey = 'tasktrackr_token';\n      this.userSubject = new BehaviorSubject(null);\n      this.user$ = this.userSubject.asObservable();\n      this.loadStoredUser();\n    } // Load user from stored token\n\n\n    loadStoredUser() {\n      const token = localStorage.getItem(this.tokenKey);\n\n      if (token) {\n        this.getUserFromToken(token);\n      }\n    } // Get user info from token\n\n\n    getUserFromToken(token) {\n      this.setToken(token);\n      this.getUserProfile().subscribe();\n    } // Set JWT token in local storage\n\n\n    setToken(token) {\n      localStorage.setItem(this.tokenKey, token);\n    } // Get JWT token from local storage\n\n\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    } // Register a new user\n\n\n    register(user) {\n      return this.http.post(`${this.apiUrl}/register`, user).pipe(tap(res => {\n        if (res.success) {\n          this.setToken(res.token);\n          this.getUserProfile().subscribe();\n        }\n      }), catchError(error => {\n        return throwError(() => error);\n      }));\n    } // Login user\n\n\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(res => {\n        if (res.success) {\n          this.setToken(res.token);\n          this.getUserProfile().subscribe();\n        }\n      }), catchError(error => {\n        return throwError(() => error);\n      }));\n    } // Get current user profile\n\n\n    getUserProfile() {\n      return this.http.get(`${this.apiUrl}/me`).pipe(map(res => {\n        const user = res.data;\n        this.userSubject.next(user);\n        return user;\n      }), catchError(error => {\n        this.userSubject.next(null);\n        return throwError(() => error);\n      }));\n    } // Check if user is logged in\n\n\n    isLoggedIn() {\n      return !!this.getToken();\n    } // Logout user\n\n\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      this.userSubject.next(null);\n      this.router.navigate(['/login']);\n    } // Request password reset\n\n\n    forgotPassword(email) {\n      return this.http.post(`${this.apiUrl}/forgotpassword`, {\n        email\n      });\n    } // Verify email with token\n\n\n    verifyEmail(token) {\n      return this.http.get(`${this.apiUrl}/verify/${token}`);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}